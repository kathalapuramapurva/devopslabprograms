MAIN.PY
from flask import Flask,render_template,request
app=Flask(_name_)

@app.route('/')
def home()
    return render_template('index1.html')
@app.route('/register',methods=['POST'])
def register():
    if request.method=="POST":
        name=request.form['name']
        email=request.form['email']
        password=request.form['password']
    return render_template("success.html")
if _name=="main_":
    print("appraveenurva")
    app.run(host = '0.0.0.0',port = 9000)
dockerfile
FROM python:3.7.4
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-catch-dir -r requirements.txt
COPY . .
CMD ["python","main.py"]

success.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" >
    <title>Document</title>
</head>
<body>
   <h1>Registration Successfull!!</h1>
</body>
</html>

requirements.txt
Flask==2.1.0
Werkzeug==2.0.2
index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" >
    <title>Registration form</title>
</head>
<body>
   <h1>Registration Form!!</h1>
   <form action="/register" method="post">
       <label for="name"> name=  </label>
       <input type="text" id="name" name="name" required ><br >
        <label for="email"> email=  </label>
       <input type="email" id="email" name="email" required ><br >
        <label for="password"> password=  </label>
       <input type="password" id="password" name="password" required ><br >
       <input type="submit" value="register"  >
   </form>
</body>
</html>

docker -v
docker build -t imagename .
docker run -p 9000:9000 imagename
python --version



1. Write code for a simple user registration form for an event.
AIM: Write code for a simple user registration form for an event.
DESCRIPTION:
1. Create a Docker file with the following content to create a Docker image for
your Flask application:
FROM python:3.8 WORKDIR /app COPY . .
RUN pip install --no-cache-dir -r requirements.txt EXPOSE 5000
CMD ["python", "app.py"]
2. Create a requirements.txt file with the following content to list the
dependencies of your Flask application: Flask==1.1.2
3. Create a app.py file with the following code for a simple user registration
form in Flask:
from flask import Flask, request, render_template
app = Flask( name )
@app.route('/register', methods=['GET', 'POST'])
def register():
if request.method == 'POST':
name = request.form['name']
email = request.form['email']
password = request.form['password']
# Store the user data in a database or file return
render_template('success.html')
return render_template('register.html')
if name== ' main ':
app.run(host='0.0.0.0')

4. Create an templates folder and add the following two files: register.html and
success.html.
register.html
<form method="post">
<input type="text" name="name" placeholder="Name">

<input type="email" name="email" placeholder="Email">
<input type="password" name="password" placeholder="Password">
<input type="submit" value="Submit">
</form>
success.html
<h2>Registration Successful</h2>
5. Build the Docker image for your Flask application using the following
command: docker build -t simple-flask-app .
6. Run a Docker container from the image using the following command:
docker run -p 5000:5000 simple-flask-app
7. Open a web browser and access the registration format
http://localhost:5000/register.

2. Explore Git and GitHub commands Aim: Explore Git and GitHub
commands
DESCRIPTION:
Git and GitHub are two of the most popular tools used for version control and
collaboration in software development.
Common Git and GitHub commands:
1. Initializing a Git repository: $ git init
2. Checking the status of your repository: $ git status
3. Adding files to the stage: $ git add <file-name>
4. Committing changes: $ git commit -m "commit message"
5. Checking the commit history: $ git log
6. Undoing changes: $ git checkout <file-name>
7. Creating a new branch: $ git branch <branch-name>
8. Switching to a different branch: $ git checkout <branch-name>
9. Merging two branches: $ git merge <branch-name>

10. Pushing changes to a remote repository: $ git push origin <branch-
name>

11. Cloning a repository from GitHub: $ git clone <repository-url
12. Creating a pull request on GitHub: Go to the repository on GitHub,
select the branch you want to merge and click the "New pull request"
Button.

3. Practice Source code management on GitHub. Experiment with the
source code written in exercise 1
Aim: Practice Source code management on GitHub. Experiment with the
source code written in exercise 1
Description:
To practice source code management on GitHub, you can follow these steps:
• Create a GitHub account if you don't already have one.
• Create a new repository on GitHub.
• Clone the repository to your local machine: $ git clone <repository- url>
• Move to the repository directory: $ cd <repository-name>
• Create a new file in the repository and add the source code written in
exercise 1.
• Stage the changes: $ git add <file-name>
• Commit the changes: $ git commit -m "Added source code for a simple
user registration form"
• Push the changes to the remote repository: $ git push origin master
• Verify that the changes are reflected in the repository on GitHub. These
steps demonstrate how to use GitHub for source code management.

4. Jenkins installation and setup, explore the environment
Aim: Jenkins installation and setup, explore the environment
DESCRIPTION
Jenkins is a popular open-source tool for Continuous Integration and
Continuous Deployment (CI/CD) in software development. Here are the steps
to install and set up Jenkins:
Download and install Jenkins:
1. Download the Jenkins package for your operating system from the
Jenkins website.
2. Follow the installation instructions for your operating system to install
Jenkins.
3. Start the Jenkins service:
4. On Windows, use the Windows Services Manager to start the Jenkins
service.
5. On Linux, use the following command to start the Jenkins service:
6. $ sudo service jenkins start Access the Jenkins web interface:
7. Open a web browser and navigate to http://localhost:8080 to access
the Jenkins web interface.
8. If the Jenkins service is running, you will see the Jenkins login page.
9. Initialize the Jenkins environment:
10. Follow the instructions on the Jenkins setup wizard to initialize the
Jenkins environment.
11. This process involves installing recommended plugins, setting up
security, and creating the first admin user.

Explore the Jenkins environment:
1. Once the Jenkins environment is set up, you can explore the various
features and functionalities available in the web interface.
2. Jenkins has a rich user interface that provides access to features such as
build history, build statistics, and system information.

5. Demonstrate continuous integration and development using Jenkins.
Aim: Demonstrate continuous integration and development using Jenkins.
DESCRIPTION
Continuous Integration (CI) and Continuous Development (CD) are important
practices in software development that can be achieved using Jenkins. Here's
an example of how you can demonstrate CI/CD using Jenkins:
Create a simple Java application:
1. Create a simple Java application that you want to integrate with Jenkins.
2. The application should have some basic functionality, such as printing
"Hello World" or performing simple calculations.
Commit the code to a Git repository:
3. Create a Git repository for the application and commit the code to the
repository.
4. Make sure that the Git repository is accessible from the Jenkins server.
Create a Jenkins job:
5. Log in to the Jenkins web interface and create a new job.
6. Configure the job to build the Java application from the Git repository.
7. Specify the build triggers, such as building after every commit to the
repository.
Build the application:
8. Trigger a build of the application using the Jenkins job.
9. The build should compile the code, run any tests, and produce an
executable jar file.
Monitor the build:
1. Monitor the build progress in the Jenkins web interface.
2. The build should show the build log, test results, and the status of the build.
Deploy the application:
1. If the build is successful, configure the Jenkins job to deploy the application
to a production environment.
2. The deployment could be as simple as copying the jar file to a production
server or using a more sophisticated deployment process,
such as using a containerization technology like Docker.
Repeat the process:

3. Repeat the process for subsequent changes to the application.
4. Jenkins should automatically build and deploy the changes to the
production environment.

6.Explore Docker commands for content management.
AIM: Explore Docker commands for content management.
DESCRIPTION
Docker is a containerization technology that is widely used for managing
application containers. Here are some commonly used Docker commands for
content management:
• Docker run: Run a command in a new container.
For example: $ docker run --name mycontainer -it ubuntu:16.04
/bin/bash
This command runs a new container based on the Ubuntu 16.04 image
and starts a shell session in the container.
• Docker start: Start one or more stopped containers.
For example: $ docker start mycontainer
This command starts the container named "mycontainer".
• Docker stop: Stop one or more running containers.
For example: $ docker stop mycontainer
This command stops the container named "mycontainer".
• Docker rm: Remove one or more containers.
For example: $ docker rm mycontainer
This command removes the container named "mycontainer".
• Docker ps: List containers.
For example: $ docker ps
This command lists all running containers.
• Docker images: List images.
For example: $ docker images
This command lists all images stored locally on the host.
• Docker pull: Pull an image or a repository from a registry.
For example: $ docker pull ubuntu:16.04
This command pulls the Ubuntu 16.04 image from the Docker Hub
registry.

• Docker push: Push an image or a repository to a registry.
For example: $ docker push myimage
This command pushes the image named "myimage" to the Docker Hub
registry.

7. Develop a simple containerized application using Docker
AIM: Develop a simple containerized application using Docker DESCRIPTION
● Choose a simple application that you want to containerize. For example,
a Python script that prints "Hello World".
Write a Dockerfile:
● Create a file named "Dockerfile" in the same directory as the
application.
In the Dockerfile, specify the base image, copy the application into the
container, and specify the command to run the application. Here's an
example Dockerfile for a Python script:
# Use the official Python image as the base image FROM python:3.9
# Copy the Python script into the container COPY hello.py /app/

# Set the working directory to /app/ WORKDIR /app/
# Run the Python script when the container starts CMD ["python",
"hello.py"]
● Build the Docker image:
Run the following command to build the Docker image:
$ docker build -t myimage .
This command builds a new Docker image using the Dockerfile and
tags the image with the name "myimage".
● Run the Docker container:
Run the following command to start a new container based on the
image:
$ docker run --name mycontainer myimage
This command starts a new container named "mycontainer" based on
the "myimage" image and runs the Python script inside the container.
● Verify the output:
Run the following command to verify the output of the container:
$ docker logs mycontainer

8. Integrate Kubernetes and Docker
AIM: Integrate Kubernetes and Docker
DESCRIPTION:
Kubernetes and Docker are both popular technologies for managing
containers, but they are used for different purposes. Kubernetes is an
orchestration platform that provides a higher-level abstractions for managing
containers, while Docker is a containerization technology that provides a
lower-level runtime for containers.
To integrate Kubernetes and Docker, you need to use Docker to build and
package your application as a container image, and then use Kubernetes to
manage and orchestrate the containers.
Here's a high-level overview of the steps to integrate Kubernetes and Docker:
• Build a Docker image:
Use Docker to build a Docker image of your application. You can use a
Dockerfile to specify the base image, copy the application into the container,
and specify the command to run the application.
• Push the Docker image to a registry:
Push the Docker image to a container registry, such as Docker Hub or Google
Container Registry, so that it can be easily accessed by Kubernetes. Deploy
the Docker image to a Kubernetes cluster:
Use Kubernetes to deploy the Docker image to a cluster. This involves
creating a deployment that specifies the number of replicas and the image to
be used, and creating a service that exposes the deployment to the network.
Monitor and manage the containers:
Use Kubernetes to monitor and manage the containers. This includes scaling
the number of replicas, updating the image, and rolling out updates to the
containers.
• Continuously integrate and deploy changes:

Use a continuous integration and deployment (CI/CD) pipeline to automatically
build, push, and deploy changes to the Docker image and the Kubernetes
cluster. This makes it easier to make updates to the application and ensures
that the latest version is always running in the cluster.
By integrating Kubernetes and Docker, you can leverage the strengths of both
technologies to manage containers in a scalable, reliable, and efficient
manner.

9. Automate the process of running containerized application developed
in exercise 7 using Kubernetes
AIM: Automate the process of running containerized application developed in
exercise 7 using Kubernetes
DESCRIPTION
To automate the process of running the containerized application developed in
exercise 7 using Kubernetes, you can follow these steps:
● Create a Kubernetes cluster:

Create a Kubernetes cluster using a cloud provider, such as
Google Cloud or Amazon Web Services, or using a local installation of
Minikube.
● Push the Docker image to a registry:

Push the Docker image of your application to a container registry,
such as Docker Hub or Google Container Registry.
● Create a deployment:

Create a deployment in Kubernetes that specifies the number of
replicas and the Docker image to use. Here's an example of a
deployment YAML file: apiVersion: apps/v1
kind: Deployment metadata:
name: myapp spec:
replicas: 3 selector:
matchLabels:
app: myapp template:
metadata:
labels:
app: myapp spec:
containers:
- name: myapp image: myimage ports:
- containerPort: 80
● Create a service:

Create a service in Kubernetes that exposes the deployment to
the network. Here's an example of a service YAML file:
apiVersion: v1 kind: Service metadata:
name: myapp-service spec:
selector: app: myapp ports:
- name: http port: 80 targetPort: 80 type: ClusterIP
● Apply the deployment and service to the cluster:

Apply the deployment and service to the cluster using the kubectl
command- line tool. For example:
$ kubectl apply -f deployment.yaml
$ kubectl apply -f service.yaml
● Verify the deployment:

Verify the deployment by checking the status of the pods and the
service. For example:
$ kubectl get pods
$ kubectl get services

10. Install and Explore Selenium for automated testing

AIM: Install and Explore Selenium for automated testing
DESCRIPTION:
To install and explore Selenium for automated testing, you can follow these
steps:
Install Java Development Kit (JDK):
● Selenium is written in Java, so you'll need to install JDK in order to run
it. You can download and install JDK from the official Oracle website.
● Install the Selenium WebDriver:
● You can download the latest version of the Selenium WebDriver from
the Selenium website. You'll also need to download the appropriate
driver for your web browser of choice (e.g. Chrome Driver for
Google Chrome).
Install an Integrated Development Environment (IDE):
● To write and run Selenium tests, you'll need an IDE. Some popular
choices include Eclipse, IntelliJ IDEA, and Visual Studio Code.
● Write a simple test:
● Once you have your IDE set up, you can write a simple test using the
Selenium WebDriver. Here's an example in Java:
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
public class Main {
public static void main(String[] args) {
System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
WebDriver driver = new ChromeDriver(); driver.get("https://www.google.com");
System.out.println(driver.getTitle());
driver.quit();
}
}

● Run the test:
Run the test using your IDE or from the command line using the
following
command:
$ javac Main.java
$ java Main

11. Write a simple program in JavaScript and perform testing using
Selenium
AIM: Write a simple program in JavaScript and perform testing using
Selenium
PROGRAM:
Simple JavaScript program that you can test using Selenium
<!DOCTYPE html>
<html>
<head>
<title>Simple JavaScript Program</title>
</head>
<body>
<p id="output">0</p>
<button id="increment-button">Increment</button>
<script>
const output = document.getElementById("output");
const incrementButton =
document.getElementById("increment-button");

let count = 0;
incrementButton.addEventListener("click", function() {
count += 1;
output.innerHTML = count;
});
</script>
</body>
</html>

Write a test case for this program using Selenium
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver; import org.junit.After;
import org.junit.Before; import org.junit.Test;
public class Main {
private WebDriver driver;
@Before
public void setUp() {
System.setProperty("webdriver.chrome.driver", "path/to/chromedriver"); driver
= new ChromeDriver();
}
@Test
public void testIncrementButton() { driver.get("file:///path/to/program.html");
driver.findElement(By.id("increment-button")).click(); String result =
driver.findElement(By.id("output")).getText(); assert result.equals("1");
}

@After

public void tearDown() { driver.quit();
}
}
You can run the test case using the following command:
$ javac Main.java
$ java Main
The output of the test case should be:
.
Time: 0.189
OK (1 test)
This output indicates that the test case passed, and the increment button was
successfully clicked, causing the output to be incremented by 1.

12.Develop test cases for the above containerized application using
selenium
AIM: Develop test cases for the above containerized application using
selenium
PROGRAM:
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver; import org.junit.After;
import org.junit.Before; import org.junit.Test;
public class Main {
private WebDriver driver;
@Before
public void setUp() {
System.setProperty("webdriver.chrome.driver", "path/to/chromedriver"); driver
= new ChromeDriver();
}
@Test
public void testHomePageLoads() { driver.get("http://localhost:8080"); String
title = driver.getTitle();
assert title.equals("My Containerized Application");
}
@Test
public void testSubmitForm() { driver.get("http://localhost:8080");
driver.findElement(By.name("name")).sendKeys("John Doe");
driver.findElement(By.name("email")).sendKeys("john.doe@example.co m");
driver.findElement(By.name("submit")).click();
String result = driver.findElement(By.id("result")).getText(); assert
result.equals("Form submitted successfully!");
}
@After
public void tearDown() { driver.quit();

}
}
You can run the test cases using the following command:
$ javac Main.java
$ java Main
The output of the test cases should be:
..
Time: 1.135
OK (2 tests)
This output indicates that both test cases passed, and the containerized
application is functioning as expected.
